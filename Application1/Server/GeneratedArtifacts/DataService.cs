//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the ApplicationData datasource.
    /// </summary>
    public sealed partial class ApplicationDataService
        : global::LightSwitchApplication.ApplicationData
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ApplicationDataService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Inserting(global::LightSwitchApplication.Lab entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Inserted(global::LightSwitchApplication.Lab entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Updating(global::LightSwitchApplication.Lab entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Updated(global::LightSwitchApplication.Lab entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Deleting(global::LightSwitchApplication.Lab entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Deleted(global::LightSwitchApplication.Lab entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Validate(global::LightSwitchApplication.Lab entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Inserting(global::LightSwitchApplication.Person entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Inserted(global::LightSwitchApplication.Person entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Updating(global::LightSwitchApplication.Person entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Updated(global::LightSwitchApplication.Person entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Deleting(global::LightSwitchApplication.Person entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Deleted(global::LightSwitchApplication.Person entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Validate(global::LightSwitchApplication.Person entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Lab> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Lab> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Lab> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Lab> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Lab> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Lab> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Labs_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Single_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Single_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Single_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Person> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Single_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Person> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_Single_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_SingleOrDefault_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_SingleOrDefault_Executing(global::System.Nullable<int> Id);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_SingleOrDefault_PreprocessQuery(global::System.Nullable<int> Id, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Person> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_SingleOrDefault_Executed(global::System.Nullable<int> Id, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Person> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_SingleOrDefault_ExecuteFailed(global::System.Nullable<int> Id, global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_All_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_All_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_All_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Person> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_All_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Person> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void People_All_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FilterQuery_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FilterQuery_Executing(string Parameter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FilterQuery_PreprocessQuery(string Parameter, ref global::System.Linq.IQueryable<global::LightSwitchApplication.Lab> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FilterQuery_Executed(string Parameter, global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Lab> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FilterQuery_ExecuteFailed(string Parameter, global::System.Exception exception);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>
                __LabsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>(
                    "Labs",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Validate);
            private static bool __Labs_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Labs_CanInsert(ref result);
                return result;
            }
            private static bool __Labs_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Labs_CanUpdate(ref result);
                return result;
            }
            private static bool __Labs_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Labs_CanDelete(ref result);
                return result;
            }
            private static bool __Labs_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Labs_CanRead(ref result);
                return result;
            }
            private static void __Labs_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Lab e)
            {
                d.Labs_Inserting(e);
            }
            private static void __Labs_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Lab e)
            {
                d.Labs_Inserted(e);
            }
            private static void __Labs_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Lab e)
            {
                d.Labs_Updating(e);
            }
            private static void __Labs_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Lab e)
            {
                d.Labs_Updated(e);
            }
            private static void __Labs_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Lab e)
            {
                d.Labs_Deleting(e);
            }
            private static void __Labs_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Lab e)
            {
                d.Labs_Deleted(e);
            }
            private static void __Labs_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Lab e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Labs_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Person>
                __PeopleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Person>(
                    "People",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Validate);
            private static bool __People_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.People_CanInsert(ref result);
                return result;
            }
            private static bool __People_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.People_CanUpdate(ref result);
                return result;
            }
            private static bool __People_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.People_CanDelete(ref result);
                return result;
            }
            private static bool __People_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.People_CanRead(ref result);
                return result;
            }
            private static void __People_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Person e)
            {
                d.People_Inserting(e);
            }
            private static void __People_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Person e)
            {
                d.People_Inserted(e);
            }
            private static void __People_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Person e)
            {
                d.People_Updating(e);
            }
            private static void __People_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Person e)
            {
                d.People_Updated(e);
            }
            private static void __People_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Person e)
            {
                d.People_Deleting(e);
            }
            private static void __People_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Person e)
            {
                d.People_Deleted(e);
            }
            private static void __People_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Person e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.People_Validate(e, r);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>(
                    "SaveChanges",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>
                __Labs_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>(
                    "Labs_Single",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Single_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Single_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Single_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Single_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_Single_PreprocessQuery);
            private static bool __Labs_Single_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.Labs_Single_CanExecute(ref r);
                return r;
            }
            private static void __Labs_Single_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Labs_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Labs_Single_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Labs_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Lab>)args[1]);
            }
            private static void __Labs_Single_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.Labs_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Labs_Single_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Lab> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Lab>)args[1];
                d.Labs_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>
                __Labs_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>(
                    "Labs_SingleOrDefault",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_SingleOrDefault_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_SingleOrDefault_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_SingleOrDefault_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_SingleOrDefault_PreprocessQuery);
            private static bool __Labs_SingleOrDefault_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.Labs_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __Labs_SingleOrDefault_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Labs_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __Labs_SingleOrDefault_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Labs_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Lab>)args[1]);
            }
            private static void __Labs_SingleOrDefault_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.Labs_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __Labs_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Lab> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Lab>)args[1];
                d.Labs_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>
                __Labs_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>(
                    "Labs_All",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_All_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_All_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_All_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_All_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Labs_All_PreprocessQuery);
            private static bool __Labs_All_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.Labs_All_CanExecute(ref r);
                return r;
            }
            private static void __Labs_All_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Labs_All_Executing();
            }
            private static void __Labs_All_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.Labs_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Lab>)args[0]);
            }
            private static void __Labs_All_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.Labs_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __Labs_All_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Lab> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Lab>)args[0];
                d.Labs_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Person>
                __People_SingleEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Person>(
                    "People_Single",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Single_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Single_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Single_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Single_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_Single_PreprocessQuery);
            private static bool __People_Single_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.People_Single_CanExecute(ref r);
                return r;
            }
            private static void __People_Single_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.People_Single_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __People_Single_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.People_Single_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Person>)args[1]);
            }
            private static void __People_Single_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.People_Single_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __People_Single_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Person> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Person>)args[1];
                d.People_Single_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Person>
                __People_SingleOrDefaultEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Person>(
                    "People_SingleOrDefault",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_SingleOrDefault_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_SingleOrDefault_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_SingleOrDefault_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_SingleOrDefault_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_SingleOrDefault_PreprocessQuery);
            private static bool __People_SingleOrDefault_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.People_SingleOrDefault_CanExecute(ref r);
                return r;
            }
            private static void __People_SingleOrDefault_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.People_SingleOrDefault_Executing((global::System.Nullable<int>)args[0]);
            }
            private static void __People_SingleOrDefault_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.People_SingleOrDefault_Executed((global::System.Nullable<int>)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Person>)args[1]);
            }
            private static void __People_SingleOrDefault_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.People_SingleOrDefault_ExecuteFailed((global::System.Nullable<int>)args[0], ex);
            }
            private static global::System.Linq.IQueryable __People_SingleOrDefault_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Person> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Person>)args[1];
                d.People_SingleOrDefault_PreprocessQuery((global::System.Nullable<int>)args[0], ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Person>
                __People_AllEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Person>(
                    "People_All",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_All_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_All_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_All_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_All_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__People_All_PreprocessQuery);
            private static bool __People_All_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.People_All_CanExecute(ref r);
                return r;
            }
            private static void __People_All_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.People_All_Executing();
            }
            private static void __People_All_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.People_All_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Person>)args[0]);
            }
            private static void __People_All_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.People_All_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __People_All_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Person> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Person>)args[0];
                d.People_All_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>
                __FilterQueryEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Lab>(
                    "FilterQuery",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FilterQuery_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FilterQuery_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FilterQuery_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FilterQuery_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FilterQuery_PreprocessQuery);
            private static bool __FilterQuery_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.FilterQuery_CanExecute(ref r);
                return r;
            }
            private static void __FilterQuery_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.FilterQuery_Executing((string)args[0]);
            }
            private static void __FilterQuery_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.FilterQuery_Executed((string)args[0], (global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Lab>)args[1]);
            }
            private static void __FilterQuery_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.FilterQuery_ExecuteFailed((string)args[0], ex);
            }
            private static global::System.Linq.IQueryable __FilterQuery_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Lab> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Lab>)args[1];
                d.FilterQuery_PreprocessQuery((string)args[0], ref query);
                return query;
            }
    
        }
    
        #endregion
    }
    
    #endregion
}
